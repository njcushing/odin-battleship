(()=>{"use strict";var e={786:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([e.id,":root {\n    --battleship-board-width: 40vw;\n}\n\n.base {\n    border: 1px solid black;\n}\n\n.board-area {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n    border: 1px solid black;\n    gap: 2rem;\n}\n\n.board-one,\n.board-two {\n    display: grid;\n    grid-template-rows: repeat(10, auto);\n    grid-template-columns: repeat(10, auto);\n    width: 20rem;\n    height: 20rem;\n    gap: 0.12rem;\n}\n\n.cell {\n    border: 1px solid black;\n}\n.cell:hover {\n    background-color: #ececec;\n}\n.cell:active {\n    background-color: #e2e2e2;\n}","",{version:3,sources:["webpack://./src/DOM/DOM-styles.css"],names:[],mappings:"AAAA;IACI,8BAA8B;AAClC;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,mCAAmC;IACnC,uBAAuB;IACvB,SAAS;AACb;;AAEA;;IAEI,aAAa;IACb,oCAAoC;IACpC,uCAAuC;IACvC,YAAY;IACZ,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,uBAAuB;AAC3B;AACA;IACI,yBAAyB;AAC7B;AACA;IACI,yBAAyB;AAC7B",sourcesContent:[":root {\n    --battleship-board-width: 40vw;\n}\n\n.base {\n    border: 1px solid black;\n}\n\n.board-area {\n    display: grid;\n    grid-template-rows: repeat(2, auto);\n    border: 1px solid black;\n    gap: 2rem;\n}\n\n.board-one,\n.board-two {\n    display: grid;\n    grid-template-rows: repeat(10, auto);\n    grid-template-columns: repeat(10, auto);\n    width: 20rem;\n    height: 20rem;\n    gap: 0.12rem;\n}\n\n.cell {\n    border: 1px solid black;\n}\n.cell:hover {\n    background-color: #ececec;\n}\n.cell:active {\n    background-color: #e2e2e2;\n}"],sourceRoot:""}]);const i=s},28:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([e.id,":root {\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    margin: 0;\n    min-width: 100vw;\n    min-height: 100vh;\n    display: grid;\n    justify-content: center;\n    align-content: center;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,eAAe;AACnB;;AAEA;IACI,2BAA2B,KAAK,eAAe;IAC/C,yBAAyB,OAAO,WAAW;IAC3C,wBAAwB,QAAQ,mBAAmB;IACnD,sBAAsB,UAAU,4BAA4B;IAC5D,qBAAqB,WAAW,2BAA2B;IAC3D,iBAAiB,eAAe;qFACiD;AACrF;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,SAAS;IACT,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;IACb,uBAAuB;IACvB,qBAAqB;AACzB",sourcesContent:[":root {\n    font-size: 20px;\n}\n\n.no-select {\n    -webkit-touch-callout: none;    /* iOS Safari */\n    -webkit-user-select: none;      /* Safari */\n    -khtml-user-select: none;       /* Konqueror HTML */\n    -moz-user-select: none;         /* Old versions of Firefox */\n    -ms-user-select: none;          /* Internet Explorer/Edge */\n    user-select: none;              /* Non-prefixed version, currently\n                                       supported by Chrome, Edge, Opera and Firefox */\n}\n\nh1, h2, h3, h4, h5, h6 {\n    padding: 0px;\n    margin: 0px;\n}\n\nbody {\n    margin: 0;\n    min-width: 100vw;\n    min-height: 100vh;\n    display: grid;\n    justify-content: center;\n    align-content: center;\n}"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&s[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var l=e[i],c=r.base?l[0]+r.base:l[0],u=a[c]||0,A="".concat(c," ").concat(u);a[c]=u+1;var d=t(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)n[d].references++,n[d].updater(p);else{var f=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:A,updater:f,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);n[i].references--}for(var l=r(e,o),c=0;c<a.length;c++){var u=t(a[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=()=>{let e="Manual";return{setStyle:n=>{"Manual"!==n&&"Computer"!==n||(e=n)},getStyle:()=>e,takeComputerTurnRandom:e=>{const n=[],t=e.observeBoard();for(let e=0;e<t.length;e++)for(let r=0;r<t[e].length;r++)2!==t[e][r]&&n.push([r,e]);const r=n[Math.floor(Math.random()*n.length)];e.receiveAttack(r)}}},n=e=>{let n=e,t=!1,r=[],o=[],a=[];const s=()=>{let e=[];for(let t=0;t<n;t++){e.push([]);for(let r=0;r<n;r++)e[t].push(0)}return e};let i=s(),l=null;const c=(e,n,t,r)=>{if(!Number.isInteger(n)||n<1||n>e.length)return!1;if(!d(t))return!1;if("boolean"!=typeof r)return!1;const o=u(n,t,r);if(o[0][0]<0||o[0][0]>=e.length||o[0][1]<0||o[0][1]>=e.length||o[1][0]<0||o[1][0]>=e.length||o[1][1]<0||o[1][1]>=e.length)return!1;for(let n=o[0][0]-1;n<=o[1][0]+1;n++)if(-1!==n&&n!==e.length)for(let t=o[0][1]-1;t<=o[1][1]+1;t++)if(-1!==t&&t!==e.length&&0!==e[t][n])return!1;return!0},u=(e,n,t)=>{const r=Math.abs(Math.floor((e-1)/2)),o=Math.abs(Math.ceil((e-1)/2));return t?[[n[0],n[1]-r],[n[0],n[1]+o]]:[[n[0]-r,n[1]],[n[0]+o,n[1]]]},A=(e,n)=>{if(0!==e[n[1]][n[0]]){const t=[],r=n=>{t.push(n),e[n[1]][n[0]]=0,n[1]>0&&0!==e[n[1]-1][n[0]]&&r([n[0],n[1]-1]),n[0]>0&&0!==e[n[1]][n[0]-1]&&r([n[0]-1,n[1]]),n[1]<e.length-1&&0!==e[n[1]+1][n[0]]&&r([n[0],n[1]+1]),n[0]<e.length-1&&0!==e[n[1]][n[0]+1]&&r([n[0]+1,n[1]])};return r(n),[e,t]}return null},d=e=>!!(Array.isArray(e)&&2===e.length&&Number.isInteger(e[0])&&e[0]>=0&&e[0]<i.length&&Number.isInteger(e[1])&&e[1]>=0&&e[1]<i.length),p=()=>t,f=()=>JSON.parse(JSON.stringify(i));return{startGame:()=>{t=!0,l=f()},resetBoard:()=>{i=s(),l=null,t=!1,r=[],o=[],a=[]},placeShip:(e,n,t)=>{if(p())return null;if(c(i,e,n,t)){const r=u(e,n,t);if(t)for(let e=r[0][1];e<=r[1][1];e++)i[e][n[0]]=1;else for(let e=r[0][0];e<=r[1][0];e++)i[n[1]][e]=1}},moveShip:(e,n,t)=>{if(p())return null;if(!d(e))return;if(!d(n))return;if("boolean"!=typeof t)return!1;let r=f();const o=A(r,e);if(!o)return;r=o[0];const a=o[1];let s=!1;a.length>2&&a[0][1]!==a[1][1]&&(s=!0);const l=Math.ceil((a.length-1)/2);let u=[];if(s?a.sort(((e,n)=>e[1]-n[1])):a.sort(((e,n)=>e[0]-n[0])),u=a[l],t&&(s=!s),t?(n[0]+=u[1]-e[1],n[1]+=u[0]-e[0]):(n[0]+=u[0]-e[0],n[1]+=u[1]-e[1]),c(r,a.length,n,s)){i=r;for(let e=0;e<a.length;e++)s?i[n[1]+(e-l)][n[0]]=1:i[n[1]][n[0]+(e-l)]=1}},deleteShip:e=>{if(p())return null;d(e)&&A(i,e)},receiveAttack:e=>{if(!p())return!1;if(d(e)&&2!==i[e[1]][e[0]]){1===i[e[1]][e[0]]&&o.push(e),r.push(e),i[e[1]][e[0]]=2;let n=JSON.parse(JSON.stringify(l));const t=A(n,e);if(t){let e=!0;for(let n=0;n<t[1].length;n++)if(1===i[t[1][n][1]][t[1][n][0]]){e=!1;break}e&&a.push(t[1])}return!0}},checkDefeat:()=>{if(!p())return!1;for(let e=0;e<i.length;e++)for(let n=0;n<i[e].length;n++)if(1===i[e][n])return!1;return!0},isGameStarted:p,observeBoard:f,previousAttacks:()=>JSON.parse(JSON.stringify(r)),previousHits:()=>JSON.parse(JSON.stringify(o)),previousSinks:()=>JSON.parse(JSON.stringify(a))}};var r=t(379),o=t.n(r),a=t(795),s=t.n(a),i=t(569),l=t.n(i),c=t(565),u=t.n(c),A=t(216),d=t.n(A),p=t(589),f=t.n(p),h=t(28),m={};m.styleTagTransform=f(),m.setAttributes=u(),m.insert=l().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=d(),o()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;var g=t(786),v={};v.styleTagTransform=f(),v.setAttributes=u(),v.insert=l().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=d(),o()(g.Z,v),g.Z&&g.Z.locals&&g.Z.locals,(()=>{(()=>{let t=!1,r=!1,o=0,a=[e(),e()];a[1].setStyle("Computer");let s=[n(10),n(10)];const i=()=>{r=!0,t=!1},l=()=>{setTimeout((()=>{let e=s[(o+1)%2];a[o].takeComputerTurnRandom(e),e.checkDefeat()?i():c()}),3e3)},c=()=>{o=(o+1)%2,"Computer"===a[o].getStyle()&&l()}})();const t={base:null,boardArea:null,board1:null,board2:null},r=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"div",n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const r=document.createElement(e);return n.forEach((e=>r.classList.add(e))),t&&t.appendChild(r),r};return{displayGame:()=>{clearDisplay(),t.base=r("div",["base"],document.body),createBoards()},createElement:r,createCell:(e,n,t)=>{switch(e){case 1:n.push(r("div",["cell","ship"],t));break;case 2:n.push(r("div",["cell","hit"],t));break;default:n.push(r("div",["cell","empty"],t))}}}})().displayGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,